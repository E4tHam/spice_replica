
clear;

circuits = {
    'circuits/dc_r.ckt', ...
    'circuits/dc_rl.ckt', ...
    'circuits/dc_rc.ckt', ...
    'circuits/dc_rlc.ckt', ...
    '__starter/benchmark_circuits/clocktree.ckt', ...
    '__starter/benchmark_circuits/nand3.ckt', ...
    '__starter/benchmark_circuits/rcmesh20.ckt', ...
    '__starter/benchmark_circuits/rc_line.ckt', ...
    '__starter/benchmark_circuits/rlc_line.ckt', ...
    '__starter/benchmark_circuits/test_inv.ckt', ...
    '__starter/benchmark_circuits/transmux.ckt' ...
};

addpath('__starter/matlab_parser.win.2022b');

if ~exist('circuits_json', 'dir')
    mkdir('circuits_json')
 end

for i = 1:length(circuits)
    % parse ckt file into struct
    [LINELEM, NLNELEM, INFO, NODES, LINNAME, NLNNAME, PRINTNV, PRINTBV, PRINTBI, PLOTNV, PLOTBV, PLOTBI] = parser(circuits{i});
    s = struct( ...
        'LINELEM', LINELEM, ...
        'NLNELEM', NLNELEM, ...
        'INFO', INFO, ...
        'NODES', NODES, ...
        'LINNAME', LINNAME, ...
        'NLNNAME', NLNNAME, ...
        'PRINTNV', PRINTNV, ...
        'PRINTBV', PRINTBV, ...
        'PRINTBI', PRINTBI, ...
        'PLOTNV', PLOTNV, ...
        'PLOTBV', PLOTBV, ...
        'PLOTBI', PLOTBI ...
    );

    % export struct as JSON
    [~, file_basename, ~] = fileparts(circuits{i});
    JSONFILE_name = append('circuits_json/', file_basename, '.json');
    display(JSONFILE_name);
    fid = fopen(JSONFILE_name, 'w');
    encodedJSON = jsonencode(s);
    fprintf(fid, encodedJSON);

end

fclose('all');
